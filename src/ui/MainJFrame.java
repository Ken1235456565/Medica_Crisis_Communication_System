/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import Model.Enterprise.Enterprise;
import Model.Network.Network;
import Model.Network.NetworkDirectory; // Corrected import
import Model.Organization.Organization;
import Model.Personnel.Role;
import Model.User.UserAccount;
import Model.ConfigureASystem; // For initializing the system data
import javax.swing.JPanel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField; // For handling password input

// Import specific role classes for type checking
import Model.Personnel.Admin;
import Model.Personnel.Doctor;
import Model.Personnel.Nurse;
import Model.Personnel.EmergencyDispatcher;
import Model.Personnel.EmergencyResponder;
import Model.Personnel.LogisticsManagerRole;
import Model.Personnel.DeliveryStaff;
import Model.Personnel.DonationCoordinator;
import Model.Personnel.Payroll;
import Model.Personnel.Manager;
import Model.Personnel.ResourceAnalyst;
import Model.Personnel.Visitor;

/**
 *
 * @author tiankaining
 */
public class MainJFrame extends javax.swing.JFrame {

    private NetworkDirectory system;
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        this.setResizable(false);
        this.setSize(1000, 800);
        this.system = ConfigureASystem.configure(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        loginBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(loginBtn)
                            .addComponent(logoutBtn))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(1, 1, 1)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(loginBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logoutBtn)
                .addContainerGap(423, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setText("Medica Crisis Communication System");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(257, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(236, 236, 236))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(273, 273, 273)
                .addComponent(jLabel1)
                .addContainerGap(536, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {
        txtUsername.setText("");
        ((JPasswordField)txtPassword).setText(""); 
        jSplitPane1.setRightComponent(jPanel2);
    }

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {
        String username = txtUsername.getText();
        String password = txtPassword.getText();// Get password from JPasswordField
        
        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username and password cannot be empty!", "Login Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(username, password); // Authenticate user via NetworkDirectory

        if (userAccount == null) {
            JOptionPane.showMessageDialog(this, "Invalid username or password!", "Login Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Organization organization = null;
        Enterprise enterprise = null;
        Network network = null;

        // Step 1: Check if the user is a System Admin
        if (userAccount.getRole() instanceof Admin) {
            // For System Admin, the work area is typically the NetworkAdminReports or a similar overview.
            JPanel sysAdminWorkArea = new ui.admin.NetworkAdminReports(); // Placeholder for System Admin WorkArea Panel
            jSplitPane1.setRightComponent(sysAdminWorkArea);
            return; // Login successful, redirect handled
        }

        // Step 2: For other roles, traverse the network, enterprise, and organization hierarchy to find the user's context
        for (Network net : system.getNetworkList()) { // Iterate through networks in the system
            for (Enterprise ent : net.getEnterpriseDirectory().getEnterpriseList()) { // Iterate through enterprises in each network
                for (Organization org : ent.getOrganizations()) { // Iterate through organizations in each enterprise
                    // Assuming employees are also UserAccounts within the Organization's employee directory for login context
                    if (org.getEmployeeDirectory() != null) { // Check if employee directory exists
                        for (UserAccount ua : org.getEmployeeDirectory().getEmployeeList()) { // Iterate through employees in the organization
                            if (ua.equals(userAccount)) { // Compare found UserAccount with authenticated UserAccount
                                organization = org;
                                enterprise = ent;
                                network = net;
                                break;
                            }
                        }
                    }
                    if (organization != null) break;
                }
                if (enterprise != null) break;
            }
            if (network != null) break;
        }

        if (organization == null) {
            JOptionPane.showMessageDialog(this, "User does not belong to any organization!", "Login Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Step 3: Route to the appropriate Work Area based on the user's role
        JPanel userWorkAreaPanel = null;
        Role userRole = userAccount.getRole(); // Get the user's role

        // --- Hospital Doctor Roles ---
        if (userRole instanceof Doctor) {
            userWorkAreaPanel = new ui.HospitalDoctor.HospitalDoctorWorkAreaPanel();
        } else if (userRole instanceof Nurse) {
            userWorkAreaPanel = new ui.HospitalNurse.HospitalNurseWorkArea();
        }

        // --- Emergency Service Roles ---
        else if (userRole instanceof EmergencyDispatcher) {
            JPanel userProcessContainer = (JPanel) jSplitPane1.getRightComponent(); 
            userWorkAreaPanel = new ui.EmergencyDispatcher.EmergencyDispatcherWorkAreaPanel(
                userProcessContainer,
                userAccount,
                organization
            );
        } else if (userRole instanceof EmergencyResponder) {
            userWorkAreaPanel = new ui.EmergencyResponder.EmergencyResponderWorkAreaPanel();
        }

        // --- Logistics & Supply Chain Roles ---
        else if (userRole instanceof LogisticsManagerRole) {
            userWorkAreaPanel = new ui.SupplychainManager.SupplyOfficerWorkAreaPanel();
        } else if (userRole instanceof DeliveryStaff) {
            userWorkAreaPanel = new ui.DeliveryStaff.DeliveryStaffWorkAreaPanel();
        }

        // --- Public Health & Donation Roles ---
        else if (userRole instanceof DonationCoordinator) {
            userWorkAreaPanel = new ui.DonationCoordinator.DonationCoordinatorWorkAreaPanel();
        } else if (userRole instanceof Payroll) {
            userWorkAreaPanel = new ui.PayrollOfficer.PayrollOfficerWorkAreaPanel();
        }
        else if (userRole instanceof Manager) {
            // Generic manager panel, often leads to an admin-like dashboard
            userWorkAreaPanel = new ui.admin.NetworkAdminReports(); // Placeholder
        }
        else if (userRole instanceof ResourceAnalyst) {
            // Resource Analyst work area
            userWorkAreaPanel = new ui.EquipmentTechnician.EquipmentStatusChart(); // Placeholder for Resource Analyst WorkArea
        }
        else if (userRole instanceof Visitor) {
            userWorkAreaPanel = new ui.VisitorDonor.VisitorDonorWorkAreaPanel();
        }
        // Handle unmapped roles or show an error
        else {
            JOptionPane.showMessageDialog(this, "No work area defined for this role!", "Login Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (userWorkAreaPanel != null) {
            jSplitPane1.setRightComponent(userWorkAreaPanel);
            // Any specific UI adjustments after login (e.g., resizing) should go here if allowed by your constraints.
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
